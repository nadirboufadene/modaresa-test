version: '3'
services: 
  postgres:
    image: postgres
    restart: always
    env_file:
      - ./backend/.env
    environment: 
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    container_name: postgres-db
    volumes:
      - ./backend/pgdata:/var/lib/postgresql/data
    networks:
      - database
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    image: tusharchy/nest-and-postgres-application:latest
    env_file:
      - ./backend/.env
    environment: 
      - DB_TYPE=${DB_TYPE}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASS=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_SYNC=false
      - POSTGRES_PORT=${POSTGRES_PORT}
      - APP_EXPIRES=${APP_EXPIRES}
      - APP_PORT=${APP_PORT}
    ports: 
      - "5000:5000"
    container_name: backend
    depends_on: 
      - postgres
    volumes: 
      - ./backend:/app
      - /app/node_modules
    networks:
      - webapp
      - database
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    container_name: nest-pgadmin4
    environment: 
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_PORT=${PGADMIN_LISTEN_PORT}
    ports: 
      - "8080:80"
    volumes: 
      - ./backend/pgadmin-data:/var/lib/pgadmin
    depends_on: 
      - postgres
    networks:
      - database
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./frontend/.env
    volumes:
      - './frontend:/app'
      - '/app/node_modules'
      - '/app/src'
      - '/app/public'
    ports:
      - 3000:3000
    networks:
      - webapp
    command: npm start
    stdin_open: true
    restart: always
    container_name: frontend
volumes:
  pgdata:
  pgadmin-data:
networks:
  webapp:
    driver: bridge
  database:
    driver: bridge
